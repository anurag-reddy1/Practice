/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode l3=null;
        ListNode head=null;
        while(true){
            if(l1!=null && l2!=null){
                if(l1.val<l2.val){
                    ListNode temp=new ListNode(l1.val);
                    if(head==null){
                        head=temp;
                        l3=temp;
                        l1=l1.next;
                    }
                    else{l3.next=temp;
                    l3=l3.next;
                    l1=l1.next;}
                }
                else
                {
                    ListNode temp=new ListNode(l2.val);
                    if(head==null){
                        head=temp;
                        l3=temp;
                        l2=l2.next;
                    }
                    else{l3.next=temp;
                    l3=l3.next;
                    l2=l2.next;}
                }
            }
           else if(l1!=null && l2==null){
               ListNode temp=new ListNode(l1.val);
               if(head==null){
                   head=temp;
                   l3=temp;
                   l1=l1.next;
               }
               else{l3.next=temp;
               l3=l3.next;
               l1=l1.next;}
               
           }
            else if(l1==null && l2!=null){
                 ListNode temp=new ListNode(l2.val);
               if(head==null){
                   head=temp;
                   l3=temp;
                   l2=l2.next;
               }
               else{l3.next=temp;
               l3=l3.next;
               l2=l2.next;}
            }  
            if(l1==null &&l2==null){
                break;
            }
        }
        return head;
    }
}
