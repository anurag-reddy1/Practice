public class PathCrossing {
	
	/*static boolean solution(String path) {
				
		int[][] map=new int[path.length()*2+1][path.length()*2+1];
		int vertical=path.length(); int horizontal=path.length();
		map[vertical][horizontal]=1;
		for(int i=0;i<path.length();i++) {
			if(path.charAt(i)=='N')
				vertical=vertical+1;
			else if(path.charAt(i)=='E')
				horizontal=horizontal+1;
			else if(path.charAt(i)=='W')
				horizontal=horizontal-1;
			else if(path.charAt(i)=='S')
				vertical=vertical-1;
			if(map[horizontal][vertical]==0)
				map[horizontal][vertical]=1;
			else
				return true;
		}
		
		return false;
	}*/
	static boolean solution(String path) {
		HashSet<String> set=new HashSet<>();
		set.add("(0,0)");
		int x=0; int y=0;
		for(char c:path.toCharArray()) {
			if(c=='N')
				y=y+1;
			else if(c=='S')
				y=y-1;
			else if(c=='E')
				x=x+1;
				else if(c=='W')
				x=x-1;
			String loc="("+x+","+y+")";
			if(set.contains("("+x+","+y+")"))
				return true;
			set.add(loc);
		}
		return false;
	}
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String path="EE";
		System.out.println(solution(path));
	}

}
