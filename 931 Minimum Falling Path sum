
public class MinPathFallingSum {
	public static int minFallingPathSum(int[][] A) {
		int m=A.length; int n=A[0].length; int min=Integer.MAX_VALUE;
		int[][] dp=new int[m][n];
		for(int i=0;i<n;i++) {
			dp[0][i]=A[0][i];
		}
		for(int i=1;i<m;i++) {
			for(int j=0;j<n;j++) {
				dp[i][j]=A[i][j];
				if(j==0) {
					dp[i][j]=dp[i][j]+Math.min(dp[i-1][j], dp[i-1][j+1]);
				}
				else if(j==n-1) {
					dp[i][j]=dp[i][j]+Math.min(dp[i-1][j], dp[i-1][j-1]);
				}
				else
					dp[i][j]=dp[i][j]+Math.min(dp[i-1][j],Math.min(dp[i-1][j-1], dp[i-1][j+1]));
			}
		}
		for(int j=0;j<n;j++) {
			min=Math.min(min, dp[m-1][j]);
		}
		
		return min;
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] A= {{-51,-35,74},{-62,14,-53},{94,61,-10}};
		System.out.println(minFallingPathSum(A));
	}

}
